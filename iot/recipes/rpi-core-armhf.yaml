# ParrotOS ARM builder recipe
# Device: Raspberry Pi armhf

steps:
  - mkimg: "{{ output }}"
    size: 2000M

  - mklabel: msdos
    device: "{{ output }}"

  - mkpart: primary
    fs-type: 'fat32'
    device: "{{ output }}"
    start: 0%
    end: 256MiB
    tag: /boot

  - mkpart: primary
    device: "{{ output }}"
    start: 300MiB
    end: 100%
    tag: /

  - kpartx: "{{ output }}"

  - mkfs: vfat
    partition: /boot
    label: BOOT

  - mkfs: ext4
    partition: /
    label: ROOTFS

  - mount: /

  - mount: /boot
    mount-on: /
    dirname: '/boot/firmware'

  - unpack-rootfs: /

  - qemu-debootstrap: parrot
    mirror: http://deb.parrot.sh/direct/parrot
    target: /
    arch: armhf
    unless: rootfs_unpacked

  - chroot: /
    shell: |
      apt update
    unless: rootfs_unpacked

  # Basic packages 
  - apt: install
    packages:
    - openssh-server
    - gnupg
    - ca-certificates
    - sudo
    - parrot-core
    - cloud-guest-utils
    - firmware-brcm80211
    - raspberrypi-kernel
    - raspberrypi-kernel-headers
    - raspberrypi-bootloader
    - raspi-firmware
    - raspi-config
    tag: /
    unless: rootfs_unpacked

  - copy-file: /tmp/set-system.sh
    src: rootfs/tmp/set-system.sh
    perm: 755
    unless: rootfs_unpacked

  # set-system.sh config file
  - copy-file: /tmp/base.conf
    src: rootfs/tmp/base.conf
    perm: 644
    unless: rootfs_unpacked

  - chroot: /
    shell: |
      bash /tmp/set-system.sh
    unless: rootfs_unpacked

  - root-fs: /
    shell: |
      # Install /boot config and fstab
      install -m 644 -o root -g root rootfs/etc/fstab "${ROOT?}/etc/fstab"
      install -m 644 -o root -g root rootfs/boot/firmware/sysconf.txt "${ROOT?}/boot/firmware/sysconf.txt"
      install -m 644 -o root -g root rootfs/boot/cmdline.txt "${ROOT?}/boot/cmdline.txt"
      install -m 644 -o root -g root rootfs/boot/config.txt "${ROOT?}/boot/config.txt"

      # Removing Debian repository
      rm "${ROOT?}/etc/apt/sources.list.d/debian.list"

  # Systemd service to get resize2fs working
  - copy-file: /etc/systemd/system/firstboot.service
    src: rootfs/etc/systemd/system/firstboot.service
    perm: 644
    unless: rootfs_unpacked
    
  - chroot: /
    shell: |
      systemctl enable firstboot.service ssh.service
    
  - chroot: /
    shell: |
      rm -rf /etc/machine-id /var/lib/dbus/machine-id /var/cache/apt/*
